* Prerequisites

*** We have an intuition on why FP matters
    - You have already heard why functional-programming matters: writting
      software that is:
      + modular
      + maintainable 
      + understandable
      + testable
      + enjoyable to write
    - You want to find out whether this is indeed true.

*** Our goals
    We share these goals[fn:1]:
    - Abstractions:
      - precise
      - elegant
      - reusable
    - Implementations:
      - correct
      - efficient
      - maintainable
    - Documentation:
      - clear
      - simple
      - accurate


* What is functional-programming
  - An abused term:
    - Lambdas?
    - Map, filter, reduce?
    - Category theory?
    - Programming with functions? 
      # well in this case most Java programs are FP!
  - What I understand is inline with *denotative* programming:
    - Nested expression structure
    - Each expression *denotes* something
    - Depending only on denotations of sub-expressions.

      
*** Example:
    
    TODO: Show a non-declarative program and its declarative counterpart.
    #+BEGIN_SRC java
    private Int x;
    y = obj.doSth() // Mutates `x`
    z = obj.doSthElse(y)
    // ...
    return compute(z + x) // Not depending only on subexpressions.
    #+END_SRC

* About this presentation
  Goals: Show:
  - Haskell features *I* like, 
  - Why *I think* it is a suitable mean for learning FP.

* Haskell sucks
  - Less libraries
  - Smaller community
  - String, Text, ByteString, argh!
  - Namespace could be improved.
  - Lot's of compiler extensions: comparable to C++ sub-languages (C++
    is a federation of languages and each team uses a particular
    sub-set of them).
  - Lazy: difficult to reason about space-complexity (althoug there are
    good profiling tools)

* Haskell misconceptions

  - Haskell is hard:
    - The language has barely 22 constructs.
      - The language doesn't even have exceptions!
    - It is functional-programming what is hard.
      - Unlike OO:
        - dependency injection frameworks,
        - gang-of-four patterns,
        - concurrency
  - Haskell is not a GP language:
    - every domain in which Java is used Haskell can be used as well!

*** COMMENT Keywords
    Keywords[fn:2]:
    0. [@0] ~->~
    1. ~=>~
    2. ~--~
    3. ~=~
    4. ~@~
    5. ~_~
    6. ~\~
    7. ~|~
    8. ~as~
    #+REVEAL: split
    9. [@9] ~case ... of~
    10. ~class~
    11. ~data~
    12. ~deriving~
    13. ~do~
    14. ~hiding~
    15. ~import~
    16. ~if ... then ... else~
    #+REVEAL: split
    17. [@17]~let ... in~
    18. ~module~
    19. ~newtype~
    20. ~qualified~
    21. ~type~
    22. ~where~
       

* ~n~ things I like about Haskell
  
*** Less noise (more power to weight)
***** Function declaration
      #+BEGIN_SRC haskell
      hello = "Hello world"
      #+END_SRC

      No ~function~, ~def~, brackets, etc.

***** Function application is juxtaposition
      In a functional language function application is one of the most used
      operators.
      #+BEGIN_SRC haskell
        f x y = 2 * x + y
        g z = f z z -- Equivalent to: (f z) z
      #+END_SRC

      In Scala:
      #+BEGIN_SRC scala
        def f(x: ???, y: ???): ??? = 2 * x + y
        def g(z: ???): ??? = f (z, z)
      #+END_SRC

***** Curried by default
      No need to decide between:
      #+BEGIN_SRC scala
        def willINeedCurry(x, y, z) = ???
      #+END_SRC
      or
      #+BEGIN_SRC scala
        def willINeedCurry(x)(y)(z) = ???
      #+END_SRC

      #+BEGIN_SRC haskell
        thisIsCurried x y z = undefined
      #+END_SRC

      One less thing to worry about! See the paradox of choice (having too many
      choices can be counter-productive).

***** Infix-operators
      Ready to use!
      #+BEGIN_SRC haskell
        like a b = a ++ " like " ++ b
        like "dogs" "meat"
        "pandas" `like` "bamboo"
      #+END_SRC

***** Separation function types and definitions
      #+BEGIN_SRC haskell
        sayHello :: String -> String
        sayHello name = "Hello " ++ name
      #+END_SRC

      Partial application, and point free syntax:
      #+BEGIN_SRC haskell
        sayHello = ("Hello " ++)
      #+END_SRC

***** Function composition is the dot
      Because ~andThen~ is way too long...
      #+BEGIN_SRC haskell
        screamHello = sayHello . capitalize
      #+END_SRC

*** Lists
    Lists are the workhorse of functional-programming.
    #+BEGIN_SRC haskell
      countries = ["The Netherlands", "Poland", "Turkey", "India", "Argentina"]
      evenNumbers = [0, 2, 4]
    #+END_SRC
    
***** Lists comprehensions 
      #+BEGIN_SRC haskell
        oddNumbers = [ i * 2 + 1 | i <- [0..]]
        pairs = [(i,j) | i <- [1,2], j <- [1..4]]
      #+END_SRC

      Can't get any more mathematical than this...

*** Lambda expressions 
    #+BEGIN_SRC haskell
      duplicate = map (\x -> x ++ x)
      res0 = duplicate ["foo", "bar"]
    #+END_SRC

*** Algebraic data types
    #+BEGIN_SRC haskell
      data List a = Nil | Cons a (List a)
    #+END_SRC

    Compare with:
    #+BEGIN_SRC scala
      sealed trait List[+A]
      case object Nil extends List[Nothing]
      case class Cons[+A](head: A, tail: List[A]) extends List[A]
    #+END_SRC

    Who can write without googling it a definition for ~prepend~ in scala
    without googling it up? Hint:
    #+BEGIN_SRC scala
    def prepend(elem: ???): ??? = new Cons(elem, this)
    #+END_SRC

    No need to worry about:
    - Variance
    - Classes, objects, inheritance
    - Lots of symbols!

*** It has a REPL
    - :t :: type information
    - :k :: kind information (type of a type)
    - :i :: information of a symbol
    - :l :: load a file

*** Typeclasses
    Full blown FP makes extensive use of *typeclasses*.

    
***** A Scala Monoid and an instance
      #+BEGIN_SRC scala
        trait Monoid[A] {
          def empty: A
          def combine(x: A, y: A): A
        }

        // Implementation for Int
        val intAdditionMonoid: Monoid[Int] = new Monoid[Int] {
          def empty: Int = 0
          def combine(x: Int, y: Int): Int = x + y
        }    
      #+END_SRC

***** A Haskell Monoid and an instance
      #+BEGIN_SRC haskell
        class Monoid a where
          mempty  :: a
          mappend :: a -> a -> a

        instance Monoid Int where
          mempty = 0
          mappend = +
      #+END_SRC
      - Give things the right name: it is not a plane, it is not a bird, it is
        not a ~val~, it is an ~instance~!

***** Derived instances
      When things start to get hairy...

******* Deriving instances in Scala
        #+BEGIN_SRC scala
          final case class Pair[A, B](first: A, second: B)

          def deriveMonoidPair[A, B](A: Monoid[A], B: Monoid[B]): Monoid[Pair[A, B]] =
            new Monoid[Pair[A, B]] {
              def empty: Pair[A, B] = Pair(A.empty, B.empty)

              def combine(x: Pair[A, B], y: Pair[A, B]): Pair[A, B] =
                Pair(A.combine(x.first, y.first), B.combine(x.second, y.second))
            }
        #+END_SRC

******* Deriving instances in Haskell
        #+BEGIN_SRC haskell
          instance (Monoid a, Monoid b) => Monoid (a, b) where
            mempty = (mempty, mempty) -- No A.empty, B.empty, let the compiler work for
                                      -- us and we use our time to do cool stuff.
            mappend (a1, b1) `mappend` (a2, b2) =
              (a1 `mappend` a2, b1 `mappend` b2)
        #+END_SRC
        We can almost read this!

*** Declarative

***** Quicksort Scala
      #+BEGIN_SRC scala
        def qsort[T <% Ordered[T]](list: List[T]): List[T] = {
          list match {
          case Nil => Nil     
          case x::xs =>        
            val (before, after) = xs partition (_ < x)
            qsort(before) ++ (x :: qsort(after))
          }
        }      
      #+END_SRC

***** Quicksort 
      #+BEGIN_SRC haskell
        qsort :: Ord a => [a] -> [a]
        qsort [] = []
        qsort (x:xs) = qsort [b | b <- xs, b <= x] ++ [x] ++ qsort [a | a <- xs, x < a]
      #+END_SRC
      
*** Do syntax
    Like for comprehensions in Scala:
    #+BEGIN_SRC scala
      def inc: IRWS[Int, List[String], Counter, Counter, Unit] = for {
        v ← SM.ask
        c ← SM.get
        _ ← SM.tell(List(s"Incrementing $c by $v "))
        _ ← SM.modify(counter ⇒ Counter(counter.value + v))
      } yield ()
    #+END_SRC

    #+BEGIN_SRC haskell
      inc :: (MonadReader Int m, MonadState Counter m, MonadWriter [Counter] m) => m ()
      -- inc = ask >>= incWith >> get >>= tell . (:[])
      inc = do
        v <- ask
        incWith v
        s <- get
        tell [s]
    #+END_SRC
    - No ~yield~ required the end.
    - No dummy ~<-~.

*** Side-effects cannot just be introduced anywhere
    - Haskell ahs no assignment
    - There are no global variables
    - No IO in pure code. Period. 
      - The program just won't type check 
        #+BEGIN_SRC haskell
          myPureFunction :: String -> String
          myPureFunction xs =
            if xs == [] then putStrLn "Empty String!"; [] else xs
        #+END_SRC
    - Discipline:
      - Curse now, be thankful later.
    - Forces you to think in a different way.
*** Composing effects via monad transformers
    Show your example from SO.

    #+BEGIN_SRC haskell
      newtype Counter = Counter Int deriving (Eq)

      instance Show Counter where
        show (Counter i) = show i

      incWith :: MonadState Counter m => Int -> m ()
      incWith n = let incCounter n' (Counter i) = Counter $ i + n'
                  in modify (incCounter n)

      inc :: (MonadReader Int m, MonadState Counter m, MonadWriter [Counter] m) => m ()
      inc = ask >>= incWith >> get >>= tell . (:[])

      compute :: (MonadReader Int m, MonadState Counter m, MonadWriter [Counter] m) => m ()
      compute =
        local (const 3) $ do
          inc
          inc
          inc
          local (const 5) $ do
            inc
            inc    
    #+END_SRC

    Implement this in Scala. I dare you.
***** Monad transformers are not easy to compose
      Scala developers have to resort to hard-coded monad transformer stacks
      (~ReaderWriterState~, ~Task~, etc.):

      #+BEGIN_SRC scala
        import scalaz._
          import Scalaz._
          val SM = ReaderWriterState.rwstMonad[Id, Int, List[String], Counter]

          case class Counter(value: Int)

          def incWith(n: Int): State[Counter, Unit] = for {
            v ← get[Counter]
            _ ← put(Counter(v.value + n))
          } yield ()

          def inc: IRWS[Int, List[String], Counter, Counter, Unit] = for {
            v ← SM.ask
            c ← SM.get
            _ ← SM.tell(List(s"Incrementing $c by $v "))
            _ ← SM.modify(counter ⇒ Counter(counter.value + v))
          } yield ()

          def compute: IRWS[Int, List[String], Counter, Counter, Unit] = {
            for {
              _ <- SM.local[Unit](i ⇒ 3)(for {
                _ ← inc
                _ ← inc
                _ ← inc
              } yield ())
              _ <- SM.local[Unit](i ⇒ 5)(for {
                _ ← inc
                _ ← inc
                _ ← inc
              } yield ())
            } yield ()
          }      
      #+END_SRC
*** Parallel and concurrent programming
    Libraries for concurrent programming are amazing.

***** STM
      This is how easy it is to solve the philosophers-problem:
      #+BEGIN_SRC Haskell
        moveWindowSTM :: Display -> Window -> Desktop -> Desktop -> STM ()
        moveWindowSTM disp win a b = 
          wa <- readTVar ma
          writeTVar ma (Set.delete win wa)
          wb <- readTVar mb
          writeTVar mb (Set.insert win wb)
          where
            ma = disp ! a
            mb = disp ! b
      #+END_SRC
      
      And ~STM~ are monads, and therefore they compose:
      #+BEGIN_SRC haskell
        swapWindows disp w a v b = atomically $ do 
          moveWindowSTM disp w a b
          moveWindowSTM disp v b a
      #+END_SRC

*** Higher-kinded types 
    With type-kinds we can abstract over types:
    #+BEGIN_SRC haskell
      data RoseTree a = RLeaf a
                      | RNode (List (RoseTree a))

      data BinTree a = BLeaf a
                     | BNode (Pair (BinTree a))

      data Pair a = MkPair a a
    #+END_SRC

    Note the similar pattern in the definitions of ~RoseTree~ and ~BinTree~. We
    are repeating ourselves! We can abstract this as follows:
    #+BEGIN_SRC haskell
      data Tree f a = Leaf a
                    | Tree (f (Tree f a))

      type RoseTree a = Tree List a
      type BinTree a = Tree Pair a
    #+END_SRC

    If your language gets in your way and prevents this kind of reuse you will
    be almost forced to repeat yourself because it is easier!

    But the fun does not stop here. See PolyKinds!
    #+BEGIN_SRC haskell
      data T (f :: k -> *) a = MkT (f a)
    #+END_SRC
*** Great extensions 

***** GADT's
      #+BEGIN_SRC haskell
        data Expr a where
          I :: Int -> Expr Int
          B :: Bool -> Expr Bool
          Add :: Expr Int -> Expr Int -> Expr Int
          Eq :: (Eq a) => Expr a -> Expr a -> Expr Bool
      #+END_SRC

      You can detect errors at compile time:
      #+BEGIN_SRC haskell
        eRight = (I 5 `Add` I 1) `Eq` I 7
        eWrong = (B True) `Add` I 5 -- Won't type check since 'B True' does not
                                    -- have type 'Expr Int'!
        eAlsoWrong = I 5 `Eq` B False
      #+END_SRC
      Try to define a type-safe EDSL in the language you like.
***** Rank-N-Types
      Consider the following function:
      #+BEGIN_SRC haskell
      sumFs f xs ys = (f xs) + (f ys)
      #+END_SRC

      What is its type? The compiler will infer the following type:
      #+BEGIN_SRC haskell
      sumFs :: Num a => (t -> a) -> t -> t -> a
      #+END_SRC

      But this means we cannot simply call:
      #+BEGIN_SRC haskell
      sumFs length "hello" [0, 1, 2]
      #+END_SRC

      Enter rank-n-types:
      #+BEGIN_SRC haskell
      sumPolyFs :: (forall a. [a] -> Int) -> [b] -> [c] -> Int
      sumPolyFs f xs ys = f xs + f ys
      #+END_SRC

      Now we can call:
      #+BEGIN_SRC hakell
      sumPolyFs length "hello" [0, 1, 2]
      #+END_SRC
***** Automatic derivation!
      Derive (trival) functors, monads, and the like for free!
      #+BEGIN_SRC haskell
        {-# LANGUAGE GeneralizedNewtypeDeriving #-}
        newtype App a = App { unApp :: ReaderT Config (StateT AppState IO) a }
                        deriving (Monad, MonadReader Config,
                                  MonadState AppState, MonadIO)      
      #+END_SRC
      https://ocharles.org.uk/blog/guest-posts/2014-12-15-deriving.html
*** Partial application on types
***** State monad Scala
      #+BEGIN_SRC scala
        def stateMonad[S] = new Monad[({type f[x] = State[S,x]})#f] {
          def unit[A](a: => A): State[S,A] = ???
          def flatMap[A, B](st: State[S, A])(f: A => State[S,B]): State[S, B] = ???
        }
      #+END_SRC

      Yes, I know there is a kind-projector plugin, but still it is more awkward than:

***** State monad Haskell
      #+BEGIN_SRC haskell
        instance Monad (State s) where
          return x = undefined
          sa >>= fsb = undefined
      #+END_SRC

* Is Haskell production ready?
  - Build tools (stack).
  - It actually has a mature FP library
  - ...
* Summary
  - Haskell is the right tool for learning FP
    - Less cluttered language/Less concepts
    - FP concepts are directly supported (no need to write FP-assembly)
    - Monad transformers are easy to compose
    - Discipline: you're (kind of) forced to write functional code! No way to
      cheat with imperative code.

  - I showed an incomplete list of why I like about the language, but you might
    like other aspects!
  - Where to go from here
    - Haskell/FP study group?
      - Two lunches a week.


* More
  - http://bob.ippoli.to/why-haskell-2013/
  - 
     https://www.reddit.com/r/haskell/comments/1pjjy5/odersky_the_trouble_with_types_strange_loop_2013/cd3bgcu/
  - https://github.com/fpinscala/fpinscala/wiki/A-brief-introduction-to-Haskell,-and-why-it-matters
* Footnotes

[fn:2] https://wiki.haskell.org/Keywords

[fn:1] https://github.com/conal/talk-2014-lambdajam-denotational-design
